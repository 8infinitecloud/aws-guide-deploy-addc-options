name: Deploy Active Directory

on:
  workflow_dispatch:
    inputs:
      ad_module:
        description: 'AD module to deploy'
        required: true
        type: choice
        options:
        - infrastructure-ad
        - ec2-ad
        - client-ad
        - managed-ad
        - connector-ad
        - simple-ad
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy
      terraform_bucket:
        description: 'S3 bucket for Terraform state'
        required: true
        type: string
      aws_region:
        description: 'AWS region'
        required: true
        default: 'us-east-1'
        type: string
      key_pair_name:
        description: 'EC2 Key Pair name (leave empty to skip)'
        required: false
        type: string

env:
  TF_VAR_aws_region: ${{ inputs.aws_region }}
  TF_VAR_key_pair_name: ${{ inputs.key_pair_name }}
  TF_VAR_terraform_bucket: ${{ inputs.terraform_bucket }}

jobs:
  terraform:
    name: Terraform ${{ inputs.action }} - ${{ inputs.ad_module }}
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./${{ inputs.ad_module }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ inputs.aws_region }}
    
    - name: Create backend configuration
      run: |
        cat > backend.tf << EOF
        terraform {
          backend "s3" {
            bucket  = "${{ inputs.terraform_bucket }}"
            key     = "terraform.tfstate"
            region  = "${{ inputs.aws_region }}"
            encrypt = true
          }
        }
        EOF
    
    - name: Terraform Init
      run: terraform init
    
    - name: Terraform Validate
      run: terraform validate
    
    - name: Terraform Plan
      if: inputs.action == 'plan'
      run: terraform plan -var-file="terraform.tfvars"
    
    - name: Terraform Apply
      if: inputs.action == 'apply'
      run: terraform apply -var-file="terraform.tfvars" -auto-approve
    
    - name: Terraform Destroy
      if: inputs.action == 'destroy'
      run: terraform destroy -var-file="terraform.tfvars" -auto-approve
